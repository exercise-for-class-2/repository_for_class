
[Dijkstral法]
    Dijkstra法は, 一般的には幅優先探索を用いるが, 今回は探索するノード数が最大数百程度であり, 計算時間がそれほど大きくならないと判断したため
    ソースコードの簡略化のためにO(n*n)で実行可能な総当たりによる探索方法を採用した.

    3次元空間でDijkstra法を求めるには, アルゴリズムの実装の工夫が必要であり, 計算時間や壁との衝突判定の難しさが課題となった.
    そこで, 2次元空間内のDijkstra法の実行と, 垂直方向のみの階層移動を繰り返すことで, 3次元空間での疑似的なDijkstra法を実現させた.
    以下がその流れである.

    前提条件として, Dijkstra法を用いて移動することができるのは, 地図上の端点間のみである. 
    地図上の端点はあらかじめそれぞれ番号付けをしておくものとする.
    (a) まずDijkstra法を実行する前に, 目的地からの距離が近い順に端点ノードをソートしておく.
        次に, 2次元空間でDijkstra法を実行し, その後, 現在地から目的地に現在の階層内で到達可能か否かを判断する.
        (b-1) もし到達可能ならば, Dijkstra法で求めた最短経路を通って目的地へ向かい, 目的地の階層が別の階層ならばその階層まで階層移動をする.
        (b-2) もし到達不可能ならば, ソートした端点ノードを目的地から近い順に見ていき, 
              到達可能な端点ノードがあればそこ一時的な目的地として, Dijkstra1法で求めた最短経路を通って向かう.
              次に, 階層移動をする. 階層が0~5の計6個ある場合は, 0->1->2->3->4->5->4->3->2->1->0->1... の順に移動する
              階層を1つ移動したら, (a)に戻る
        (c) 現在地の座標(x, y, z)が目的地の座標と一致したら, 反復終了.
    
    このようにして階層移動を含めた目的地までの最短経路問題を解くことで, 3次元空間の疑似的なDijkstra法を実現させた.

    